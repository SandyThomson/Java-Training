Chapter 11 Self Test

  1.  How does Java’s multithreading capability enable you to write more efficient programs?
      - By allowing you to organise your programme so that tasks can be run concurrently.


  2.  Multithreading is supported by the _________ class and the ________ interface.  i
      - Thread class and Runnable interface.


  3.  When creating a runnable object, why might you want to extend Thread rather than implement Runnable?
      - By implementing Runnable, you allow your thread to start themselves


  4.  Show how to use join( ) to wait for a thread object called MyThrd to end.
      - MyThrd.join();


  5.  Show how to set a thread called MyThrd to three levels above normal priority.
      - MyThrd.setPRIORITY( Thread.NORM_PRIORITY + 3 );


  6.  What is the effect of adding the synchronized keyword to a method?
      - It limited the number of threads that can call it to one only.


  7.  The wait( ) and notify( ) methods are used to perform _______________________.
      - inter-thread communications


  8.  Change the TickTock class so that it actually keeps time. That is, have each tick take one half second, and each tock take one half second. Thus, each tick-tock will take one second.  (Don’t worry about the time it takes to switch tasks, etc.)
      - See [src/TickTock/TickTock.java][TickTock.java]


  9.  Why can’t you use suspend( ), resume( ), and stop( ) for new programs?
      - They have been depricated since they are unstable.


  10.   What method defined by Thread obtains the name of a thread?
      - "getName()";


  11.   What does isAlive( ) return?
      - A bolean that returns true if the thread is alive.


  12.   On your own, try adding synchronization to the Queue class developed in previous chapters so that it is safe for multithreaded use.  
      - See [.......]



