1. What class is at the top of the exception hierarchy?
A: Throwable
2. Briefly explain how to use try and catch.A: Surround a block of code which you want to monitor for an exception with a try{} block.  The subsequent catch(exc){} block will trap any exceptions of the specified type (or subclass thereof) and be executed.3. What is wrong with this fragment?       // ...       vals[18] = 10;       catch (ArrayIndexOutOfBoundsException exc) {         // handle error       }A: There is no try{} block.4. What happens if an exception is not caught?A: The default handler is invoked, resulting in (usually) undesirable behaviour (i.e. termination & stack trace spewed to console)5. What is wrong with this fragment?       class A extends Exception { ...       class B extends A { ...       // ...try {// ...       }       catch (A exc) { ... }       catch (B exc) { ... }A: B is a subclass of A.  Therefore to explicitly catch an exception of type B it must appear before A in the catch{} chain - the second catch{} is unreachable.6. Can an inner catch rethrow an exception to an outer catch?

A: Yes7. The finally block is the last bit of code executed before your program ends. True or False?  Explain your answer.A: False.  The finally block is the last piece of code executed in a given try-catch-finally cycle.  This cycle _might_ end with termination, but only if the finally block itself terminates the program.8. What type of exceptions must be explicitly declared in a throws clause of a method?A: Any which are not subclasses of Error or RuntimeException.9. What is wrong with this fragment?       class MyClass { // ... }       // ...       throw new MyClass();A: MyClass does not extend Throwable (or a subclass thereof) and so cannot be thrown.10. In question 3 of the Chapter 6 Self Test, you created a Stack class. Add custom exceptions to your class that report stack full and stack empty conditions.A: See selftest/StackDemo.java11. What are the three ways that an exception can be generated?A: Error in JVM;  Error in program;  Manually (using ‘throw’); 12. What are the two direct subclasses of Throwable?A: Error and Exception13. What is the multi-catch feature?A: Allows a single catch{} block to trap multiple exceptions.14. Should your code typically catch exceptions of type Error?

A: No; These relate to JVM errors which are beyond our control.