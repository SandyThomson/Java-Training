1) The byte streams were originally the only I/O streams for Java, so when character streams were added byte streams had to be maintained for backwards compatability.

2) THe original streams used to define the console I/O were byte streams, so they have to remain byte streams for compatability purposes.

3)
```java
FileInputStream stream = new FileInputStream(fileName);
```

4)
```java
FileReader writer = new FileReader(fileName);
```

5)
```java
RandomAccessFile file = new RandomAccessFile(fileName, permissions);
```

6) You can use the primitive wrappers e.g:
```java
double d = Double.parseDouble("123.23");

7) See Question7.java

8) See Question8.java

9) `System.in` is an `InputStream`

10) `read()` returns -1 when the end of the stream is reached

11) A `DataInputStream` is used to read binary data.

12) `Reader` and `Writer` are a the top of the character stream class hierarchies.

13) `try-with-resources` is used to automatically close I/O objects that are used within a try-catch block.

14) True
